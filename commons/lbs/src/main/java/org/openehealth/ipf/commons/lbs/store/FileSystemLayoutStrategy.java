/*
 * Copyright 2008 the original author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *     
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.openehealth.ipf.commons.lbs.store;

import static org.apache.commons.lang.Validate.notNull;

import java.io.File;
import java.util.UUID;

/**
 * Provides a common interface for strategies that map a {@code UUID} to a 
 * location in the file system.
 * @author Jens Riemschneider
 */
public abstract class FileSystemLayoutStrategy {
    private final File baseDir;

    /**
     * Constructs a file system layout.
     * @param baseDir   
     *          directory used as parent for files. This directory can be
     *          specified in any valid way that the {@code File} class allows. 
     *          It must be a valid directory, but it is not required to have a 
     *          normalized or canonical path.          
     *          Although not enforced, it is recommended that all files  
     *          generated by {@link #toFile} are below this base directory. 
     */
    public FileSystemLayoutStrategy(File baseDir) {
        notNull(baseDir, "baseDir cannot be null");
        this.baseDir = baseDir;
    }

    /**
     * @return base directory used as parent for files 
     */
    public File getBaseDir() {
        return baseDir;
    }
    
    /**
     * Converts a {@code UUID} to a file within the base directory.
     * @param uuid      
     *          the id used to generate the file
     * @return the generated file. This file can be located directly in the base
     *          directory or in any sub directory (existent or non-existent).
     *          This strategy does not create any directories or files in the 
     *          file system. Therefore, the return value is the proposed
     *          location for the file. It is not necessary that the file can be 
     *          created without a failure at the location (e.g. the path might 
     *          be too long).
     */
    public abstract File toFile(UUID uuid);
    
    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return String.format("{%1$s: baseDir=%2$s}", getClass().getSimpleName(), baseDir);
    }
}
