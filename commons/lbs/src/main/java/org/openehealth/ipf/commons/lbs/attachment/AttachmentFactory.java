/*
 * Copyright 2008 the original author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *     
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.openehealth.ipf.commons.lbs.attachment;

import static org.apache.commons.lang.Validate.notNull;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Observer;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.openehealth.ipf.commons.lbs.store.LargeBinaryStore;

/**
 * Factory component for attachments that are generated by processors or 
 * endpoints and require storage and life-cycle management.
 * <p>
 * This factory provides storage via an attached {@link LargeBinaryStore}.
 * Creation and deletion of attachments can be observed by {@link Observer}s.
 * @author Jens Riemschneider
 */
public class AttachmentFactory {
    private final String defaultAttachmentId;    
    private final LargeBinaryStore store;
    private final Map<String, List<AttachmentDataSource>> unitOfWorkMap;
    
    private static final Log log = LogFactory.getLog(AttachmentFactory.class);

    /**
     * Constructs the factory via the store.
     * @param store
     *          the storage that is used for attachment resources
     * @param defaultAttachmentId
     *          default id that is used for attachments that do not get their
     *          id defined via other sources
     */
    public AttachmentFactory(LargeBinaryStore store, String defaultAttachmentId) {        
        notNull(store, "store cannot be null");
        notNull(defaultAttachmentId, "defaultAttachmentId cannot be null");
        
        this.store = store;
        this.defaultAttachmentId = defaultAttachmentId;
        this.unitOfWorkMap = new HashMap<String, List<AttachmentDataSource>>();
        
        log.debug("created: " + this);
    }
    
    /**
     * Creates an attachment with initial content
     * @param unitOfWorkId
     *          the id of the unit of work that the attachment is created for
     * @param contentType
     *          type of the content contained in the input stream
     * @param name
     *          name of the resource. May be {@code null} if the content is
     *          unnamed.
     * @param id
     *          attachment id of the resource. May be {@code null} if the id
     *          is not known and the default id should be used.
     * @param inputStream
     *          stream to the actual content
     * @return the created attachment
     * @throws IOException
     *          if a problem occurred related to the input stream
     */
    public AttachmentDataSource createAttachment(String unitOfWorkId, String contentType, String name, String id, InputStream inputStream) throws IOException {
        notNull(contentType, "contentType cannot be null");
        notNull(inputStream, "inputStream cannot be null");
        notNull(unitOfWorkId, "unitOfWorkId cannot be null");
        URI resourceUri = store.add(inputStream);       
        return createAttachment(unitOfWorkId, contentType, name, id, resourceUri);
    }

    /**
     * Creates an attachment without any initial content.
     * <p>
     * Note: It is expected that the caller fills the content after 
     * receiving the data source via the stream returned by 
     * {@link AttachmentDataSource#getOutputStream()}.
     * @param unitOfWorkId
     *          the id of the unit of work that the attachment is created for
     * @param contentType
     *          type of the content that will be written to the attachment
     * @param name
     *          name of the resource. May be {@code null} if the content is
     *          unnamed.
     * @param id
     *          attachment id of the resource. May be {@code null} if the id
     *          is not known and the default id should be used.
     * @return the created attachment
     * @throws IOException
     *          if a problem occurred related to the input stream in the
     *          attachment description
     */
    public AttachmentDataSource createAttachment(String unitOfWorkId, String contentType, String name, String id) throws IOException {
        notNull(contentType, "contentType cannot be null");
        notNull(unitOfWorkId, "unitOfWorkId cannot be null");
        URI resourceUri = store.add();
        return createAttachment(unitOfWorkId, contentType, name, id, resourceUri);
    }
    
    /**
     * Creates an attachment without any initial content.
     * <p>
     * The content type is set to "application/unknown".
     * @param unitOfWorkId
     *          the id of the unit of work that the attachment is created for
     * @return the created attachment
     * @throws IOException
     *          if a problem occurred related to the input stream in the
     *          attachment description
     */
    public AttachmentDataSource createAttachment(String unitOfWorkId) throws IOException {
        notNull(unitOfWorkId, "unitOfWorkId cannot be null");
        return createAttachment(unitOfWorkId, "application/unknown", null, null);
    }

    /**
     * Deletes an attachment
     * @param unitOfWorkId
     *          the id of the unit of work that the attachment is created for
     * @param attachment
     *          the attachment that is deleted 
     */
    public void deleteAttachment(String unitOfWorkId, AttachmentDataSource attachment) {
        notNull(attachment, "attachment cannot be null");
        notNull(unitOfWorkId, "unitOfWorkId cannot be null");
        
        attachment.delete();
        unregisterFromUnitOfWork(unitOfWorkId, attachment);

        log.debug("deleted attachment: " + attachment);
    }    
    
    /**
     * Deletes an attachment after the next usage
     * @param unitOfWorkId
     *          the id of the unit of work that the attachment is created for
     * @param attachment
     *          the attachment that is deleted 
     */
    public void deleteAttachmentDelayed(String unitOfWorkId, AttachmentDataSource attachment) {
        notNull(attachment, "attachment cannot be null");
        notNull(unitOfWorkId, "unitOfWorkId cannot be null");
        
        attachment.deleteAfterNextUsage();
        unregisterFromUnitOfWork(unitOfWorkId, attachment);

        log.debug("marked attachment for delayed deletion: " + attachment);
    }

    /**
     * Returns all attachments that were created for the given unit of work
     * @param unitOfWorkId
     *          the id of the unit of work that the attachment is created for
     * @return the list of attachments. Never <code>null</code>
     */
    public List<AttachmentDataSource> getAttachments(String unitOfWorkId) {
        notNull(unitOfWorkId, "unitOfWorkId cannot be null");
        return getRegisteredAttachments(unitOfWorkId);
    }    
    
    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return String.format("{%1$s: defaultAttachmentId=%2$s, store=%3$s}",
                getClass().getSimpleName(), defaultAttachmentId, store);
    }
    
    private AttachmentDataSource createAttachment(String unitOfWorkId, String contentType, String name, String id, URI resourceUri) {
        LargeBinaryStoreDataSource dataSource = 
            new LargeBinaryStoreDataSource(store, resourceUri, contentType, name);
        
        AttachmentDataSource attachment = 
            new AttachmentDataSource(safeAttachmentId(id), dataSource);
        
        registerWithUnitOfWork(unitOfWorkId, attachment);
         
        log.debug("created attachment: " + attachment);

        return attachment;
    }
    
    private List<AttachmentDataSource> getRegisteredAttachments(String unitOfWorkId) {
        synchronized (unitOfWorkMap) {
            List<AttachmentDataSource> registeredAttachments = unitOfWorkMap.get(unitOfWorkId);
            if (registeredAttachments == null) {
                return Collections.emptyList();
            }
            
            return new ArrayList<AttachmentDataSource>(registeredAttachments);
        }
    }

    private void unregisterFromUnitOfWork(String unitOfWorkId, AttachmentDataSource attachment) {
        synchronized (unitOfWorkMap) {
            List<AttachmentDataSource> registeredAttachments = unitOfWorkMap.get(unitOfWorkId);
            if (registeredAttachments != null) {
                registeredAttachments.remove(attachment);
            }
        }
    }

    private void registerWithUnitOfWork(String unitOfWorkId, AttachmentDataSource attachment) {
        synchronized (unitOfWorkMap) {
            List<AttachmentDataSource> registeredAttachments = unitOfWorkMap.get(unitOfWorkId);
            if (registeredAttachments == null) {
                registeredAttachments = new ArrayList<AttachmentDataSource>();
                unitOfWorkMap.put(unitOfWorkId, registeredAttachments);
            }
            registeredAttachments.add(attachment);
        }
    }

    private String safeAttachmentId(String id) {
        return id != null ? id : defaultAttachmentId;
    }
}
